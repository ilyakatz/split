{"name":"Split","body":"# Split\r\n\r\nSplit is a rack based ab testing framework designed to work with Rails, Sinatra or any other rack based app.\r\n\r\nSplit is heavily inspired by the Abingo and Vanity rails ab testing plugins and Resque in its use of Redis.\r\n\r\nSplit is designed to be hacker friendly, allowing for maximum customisation and extensibility.\r\n\r\n## Requirements\r\n\r\nSplit uses redis as a datastore.\r\n\r\nSplit only supports redis 2.0 or greater.\r\n\r\nIf you're on OS X, Homebrew is the simplest way to install Redis:\r\n\r\n    $ brew install redis\r\n    $ redis-server /usr/local/etc/redis.conf\r\n\r\nYou now have a Redis daemon running on 6379.\r\n\r\n## Setup\r\n\r\nIf you are using bundler add split to your Gemfile:\r\n\r\n    gem 'split'\r\n\r\nThen run:\r\n\r\n    bundle install\r\n\r\nOtherwise install the gem:\r\n\r\n    gem install split\r\n\r\nand require it in your project:\r\n\r\n    require 'split'\r\n\r\n### SystemTimer\r\n\r\nIf you are using Redis on Ruby 1.8.x then you will likely want to also use the SystemTimer gem if you want to make sure the Redis client will not hang.\r\n\r\nPut the following in your gemfile as well:\r\n\r\n    gem 'SystemTimer'\r\n\r\n### Rails\r\n\r\nSplit is autoloaded when rails starts up, as long as you've configured redis it will 'just work'.\r\n\r\n### Sinatra\r\n\r\nTo configure sinatra with Split you need to enable sessions and mix in the helper methods. Add the following lines at the top of your sinatra app:\r\n\r\n    class MySinatraApp < Sinatra::Base\r\n      enable :sessions\r\n      helpers Split::Helper\r\n\r\n      get '/' do\r\n      ...\r\n    end\r\n\r\n## Usage\r\n\r\nTo begin your ab test use the `ab_test` method, naming your experiment with the first argument and then the different variants which you wish to test on as the other arguments.\r\n\r\n`ab_test` returns one of the alternatives, if a user has already seen that test they will get the same alternative as before, which you can use to split your code on.\r\n\r\nIt can be used to render different templates, show different text or any other case based logic.\r\n\r\n`finished` is used to make a completion of an experiment, or conversion.\r\n\r\nExample: View\r\n\r\n    <% ab_test(\"login_button\", \"/images/button1.jpg\", \"/images/button2.jpg\") do |button_file| %>\r\n      <%= img_tag(button_file, :alt => \"Login!\") %>\r\n    <% end %>\r\n\r\nExample: Controller\r\n\r\n    def register_new_user\r\n      # See what level of free points maximizes users' decision to buy replacement points.\r\n      @starter_points = ab_test(\"new_user_free_points\", '100', '200', '300')\r\n    end\r\n\r\nExample: Conversion tracking (in a controller!)\r\n\r\n    def buy_new_points\r\n      # some business logic\r\n      finished(\"new_user_free_points\")\r\n    end\r\n\r\nExample: Conversion tracking (in a view)\r\n\r\n    Thanks for signing up, dude! <% finished(\"signup_page_redesign\") >\r\n\r\nYou can find more examples, tutorials and guides on the [wiki](https://github.com/andrew/split/wiki).\r\n\r\n## Extras\r\n\r\n### Weighted alternatives\r\n\r\nPerhaps you only want to show an alternative to 10% of your visitors because it is very experimental or not yet fully load tested.\r\n\r\nTo do this you can pass a weight with each alternative in the following ways:\r\n\r\n    ab_test('homepage design', {'Old' => 20}, {'New' => 2})\r\n\r\n    ab_test('homepage design', 'Old', {'New' => 0.1})\r\n\r\n    ab_test('homepage design', {'Old' => 10}, 'New')\r\n\r\nNote: If using ruby 1.8.x and weighted alternatives you should always pass the control alternative through as the second argument with any other alternatives as a third argument because the order of the hash is not preserved in ruby 1.8, ruby 1.9.1+ users are not affected by this bug.\r\n\r\nThis will only show the new alternative to visitors 1 in 10 times, the default weight for an alternative is 1.\r\n\r\n### Overriding alternatives\r\n\r\nFor development and testing, you may wish to force your app to always return an alternative.\r\nYou can do this by passing it as a parameter in the url.\r\n\r\nIf you have an experiment called `button_color` with alternatives called `red` and `blue` used on your homepage, a url such as:\r\n\r\n    http://myawesomesite.com?button_color=red\r\n\r\nwill always have red buttons. This won't be stored in your session or count towards to results.\r\n\r\n### Reset after completion\r\n\r\nWhen a user completes a test their session is reset so that they may start the test again in the future.\r\n\r\nTo stop this behaviour you can pass the following option to the `finished` method:\r\n\r\n    finished('experiment_name', :reset => false)\r\n\r\nThe user will then always see the alternative they started with.\r\n\r\n### Multiple experiments at once\r\n\r\nBy default Split will avoid users participating in multiple experiments at once. This means you are less likely to skew results by adding in more variation to your tests.\r\n\r\nTo stop this behaviour and allow users to participate in multiple experiments at once enable the `allow_multiple_experiments` config option like so:\r\n\r\n    Split.configure do |config|\r\n      config.allow_multiple_experiments = true\r\n    end\r\n\r\n## Web Interface\r\n\r\nSplit comes with a Sinatra-based front end to get an overview of how your experiments are doing.\r\n\r\nIf you are running Rails 2: You can mount this inside your app using Rack::URLMap in your `config.ru`\r\n\r\n    require 'split/dashboard'\r\n\r\n    run Rack::URLMap.new \\\r\n      \"/\"       => Your::App.new,\r\n      \"/split\" => Split::Dashboard.new\r\n\r\nHowever, if you are using Rails 3: You can mount this inside your app routes by first adding this to the Gemfile:\r\n\r\n    gem 'split', :require => 'split/dashboard'\r\n\r\nThen adding this to config/routes.rb\r\n\r\n    mount Split::Dashboard, :at => 'split'\r\n\r\nYou may want to password protect that page, you can do so with `Rack::Auth::Basic`\r\n\r\n    Split::Dashboard.use Rack::Auth::Basic do |username, password|\r\n      username == 'admin' && password == 'p4s5w0rd'\r\n    end\r\n\r\n## Configuration\r\n\r\nYou can override the default configuration options of Split like so:\r\n\r\n    Split.configure do |config|\r\n      config.robot_regex = /my_custom_robot_regex/\r\n      config.ignore_ip_addresses << '81.19.48.130'\r\n      config.db_failover = true # handle redis errors gracefully\r\n      config.db_failover_on_db_error = proc{|error| Rails.logger.error(error.message) }\r\n      config.allow_multiple_experiments = true\r\n    end\r\n\r\n### DB failover solution\r\n\r\nDue to the fact that Redis has no autom. failover mechanism, it's\r\npossible to switch on the `db_failover` config option, so that `ab_test`\r\nand `finished` will not crash in case of a db failure. `ab_test` always\r\ndelivers alternative A (the first one) in that case.\r\n\r\nIt's also possible to set a `db_failover_on_db_error` callback (proc)\r\nfor example to log these errors via Rails.logger.\r\n\r\n### Redis\r\n\r\nYou may want to change the Redis host and port Split connects to, or\r\nset various other options at startup.\r\n\r\nSplit has a `redis` setter which can be given a string or a Redis\r\nobject. This means if you're already using Redis in your app, Split\r\ncan re-use the existing connection.\r\n\r\nString: `Split.redis = 'localhost:6379'`\r\n\r\nRedis: `Split.redis = $redis`\r\n\r\nFor our rails app we have a `config/initializers/split.rb` file where\r\nwe load `config/split.yml` by hand and set the Redis information\r\nappropriately.\r\n\r\nHere's our `config/split.yml`:\r\n\r\n    development: localhost:6379\r\n    test: localhost:6379\r\n    staging: redis1.example.com:6379\r\n    fi: localhost:6379\r\n    production: redis1.example.com:6379\r\n\r\nAnd our initializer:\r\n\r\n    rails_root = ENV['RAILS_ROOT'] || File.dirname(__FILE__) + '/../..'\r\n    rails_env = ENV['RAILS_ENV'] || 'development'\r\n\r\n    split_config = YAML.load_file(rails_root + '/config/split.yml')\r\n    Split.redis = split_config[rails_env]\r\n\r\n## Namespaces\r\n\r\nIf you're running multiple, separate instances of Split you may want\r\nto namespace the keyspaces so they do not overlap. This is not unlike\r\nthe approach taken by many memcached clients.\r\n\r\nThis feature is provided by the [redis-namespace][rs] library, which\r\nSplit uses by default to separate the keys it manages from other keys\r\nin your Redis server.\r\n\r\nSimply use the `Split.redis.namespace` accessor:\r\n\r\n    Split.redis.namespace = \"split:blog\"\r\n\r\nWe recommend sticking this in your initializer somewhere after Redis\r\nis configured.\r\n\r\n## Extensions\r\n\r\n  - [Split::Export](http://github.com/andrew/split-export) - easily export ab test data out of Split\r\n  - [Split::Analytics](http://github.com/andrew/split-analytics) - push test data to google analytics\r\n\r\n## Screencast\r\n\r\nRyan bates has produced an excellent 10 minute screencast about split on the Railscasts site: [A/B Testing with Split](http://railscasts.com/episodes/331-a-b-testing-with-split)\r\n\r\n## Contributors\r\n\r\nSpecial thanks to the following people for submitting patches:\r\n\r\n* Lloyd Pick\r\n* Jeffery Chupp\r\n* Andrew Appleton\r\n\r\n## Development\r\n\r\nSource hosted at [GitHub](http://github.com/andrew/split).\r\nReport Issues/Feature requests on [GitHub Issues](http://github.com/andrew/split/issues).\r\n\r\nTests can be ran with `rake spec`\r\n\r\n[![Build Status](https://secure.travis-ci.org/andrew/split.png?branch=master)](http://travis-ci.org/andrew/split) [![Dependency Status](https://gemnasium.com/andrew/split.png)](https://gemnasium.com/andrew/split)\r\n\r\n### Note on Patches/Pull Requests\r\n\r\n * Fork the project.\r\n * Make your feature addition or bug fix.\r\n * Add tests for it. This is important so I don't break it in a\r\n   future version unintentionally.\r\n * Commit, do not mess with rakefile, version, or history.\r\n   (if you want to have your own version, that is fine but bump version in a commit by itself I can ignore when I pull)\r\n * Send me a pull request. Bonus points for topic branches.\r\n\r\n## Copyright\r\n\r\nCopyright (c) 2012 Andrew Nesbitt. See [LICENSE](https://github.com/andrew/split/blob/master/LICENSE) for details.","tagline":"Rack Based AB testing framework","google":"UA-265870-28","note":"Don't delete this file! It's used internally to help with page regeneration."}